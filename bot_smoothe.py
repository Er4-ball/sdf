import telebot
import os
import json
import random
from telebot import types


TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

script_dir = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(script_dir, "smoothe.json")

try:
    with open(file_path, 'r', encoding='utf-8') as f:
        smoothie_recipes = json.load(f)
except FileNotFoundError:
    print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    smoothie_recipes = {}
    

def create_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    fruit_button = types.InlineKeyboardButton("–§—Ä—É–∫—Ç", callback_data="fruit")
    additive_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∫–∞", callback_data="additive")
    size_button = types.InlineKeyboardButton("–†–∞–∑–º–µ—Ä", callback_data="size")
    keyboard.add(fruit_button, additive_button, size_button)
    recommendation_button = types.InlineKeyboardButton("–•–æ—á—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!", callback_data="recommendation")
    keyboard.add(recommendation_button)
    weight_recommendation_button = types.InlineKeyboardButton("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–µ—Å—É", callback_data="weight_recommendation")
    keyboard.add(weight_recommendation_button)

    return keyboard

@bot.callback_query_handler(func=lambda call: call.data == "weight_recommendation")
def weight_recommendation_callback(call):
    handle_weight_recommendation(call.message)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–º—É–∑–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ:", reply_markup=create_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "fruit")
def fruit_callback(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for fruit in smoothie_recipes.get("fruits", []):
        keyboard.add(types.InlineKeyboardButton(fruit, callback_data=f"fruit_{fruit}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                         text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "additive")
def additive_callback(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for additive in smoothie_recipes.get("additives", []):
        keyboard.add(types.InlineKeyboardButton(additive, callback_data=f"additive_{additive}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                         text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "size")
def size_callback(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for size in smoothie_recipes.get("sizes", []):
        keyboard.add(types.InlineKeyboardButton(size, callback_data=f"size_{size}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                         text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=keyboard)

selected_params = {}
last_recommended_smoothie = None

@bot.callback_query_handler(func=lambda call: call.data.startswith("fruit_"))
def fruit_selected(call):
    fruit = call.data.split("_")[1]
    selected_params["fruit"] = fruit
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                         text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ—Ä—É–∫—Ç: {fruit}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É:", 
                         reply_markup=get_additive_keyboard())

def get_additive_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for additive in smoothie_recipes.get("additives", []):
        keyboard.add(types.InlineKeyboardButton(additive, callback_data=f"additive_{additive}"))
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith("additive_"))
def additive_selected(call):
    additive = call.data.split("_")[1]
    selected_params["additive"] = additive
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                         text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–∫—É: {additive}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", 
                         reply_markup=get_size_keyboard())

def get_size_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for size in smoothie_recipes.get("sizes", []):
        keyboard.add(types.InlineKeyboardButton(size, callback_data=f"size_{size}"))
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith("size_"))
def size_selected(call):
    size = call.data.split("_")[1]
    selected_params["size"] = size
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                         text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä: {size}")
    check_and_recommend(call.message.chat.id)

def check_and_recommend(chat_id):
    global last_recommended_smoothie

    if "fruit" in selected_params and "additive" in selected_params and "size" in selected_params:
        fruit = selected_params["fruit"]
        additive = selected_params["additive"]
        size = selected_params["size"]

        matching_smoothies = []
        for smoothie in smoothie_recipes.get("smoothies", []):
            if (smoothie["fruit"] == fruit and 
                additive in smoothie["additives"] and  
                smoothie["size"] == size):
                matching_smoothies.append(smoothie)

        if matching_smoothies:
            smoothie = random.choice(matching_smoothies)
            response = f"–í–∞—à —Å–º—É–∑–∏: {smoothie['name']}\n–†–µ—Ü–µ–ø—Ç: {smoothie['recipe']}"
            bot.send_message(chat_id, response)
            
            if "image" in smoothie:  
                bot.send_photo(chat_id, smoothie['image'])
                
            last_recommended_smoothie = smoothie
            selected_params.clear()
        else:
            bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            selected_params.clear()

@bot.callback_query_handler(func=lambda call: call.data == "recommendation")
def recommend_smoothie(call):
    global last_recommended_smoothie

    if last_recommended_smoothie is None:
        bot.send_message(call.message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–º—É–∑–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.")
        return

    available_smoothies = [s for s in smoothie_recipes.get("smoothies", []) if s != last_recommended_smoothie]

    if not available_smoothies:
        bot.send_message(call.message.chat.id, "–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º—É–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")
        return

    recommended_smoothie = random.choice(available_smoothies)
    response = f"–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å: {recommended_smoothie['name']}\n–†–µ—Ü–µ–ø—Ç: {recommended_smoothie['recipe']}"
    bot.send_message(call.message.chat.id, response)
    if "photo" in recommended_smoothie:
        bot.send_photo(call.message.chat.id, recommended_smoothie['photo'])

    last_recommended_smoothie = recommended_smoothie

@bot.message_handler(func=lambda message: message.text.lower() == "–µ—â–µ")
def send_menu_again(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–º—É–∑–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ:", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() == "—Å–ø–∞—Å–∏–±–æ")
def send_gratitude(message):
    bot.reply_to(message, "–ù–µ –∑–∞ —á—Ç–æ!")

@bot.message_handler(commands=['recommend_by_weight'])
def handle_weight_recommendation(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):")
    bot.register_next_step_handler(msg, process_weight_recommendation)

def process_weight_recommendation(message):
    try:
        weight = float(message.text)
        
        if weight <= 0 or weight > 300:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 1 –¥–æ 300 –∫–≥.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –≤–µ—Å—É
        if weight < 60:
            category = "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"
            fruits = ["–±–∞–Ω–∞–Ω", "–∫–ª—É–±–Ω–∏–∫–∞"]
            additives = ["–ø—Ä–æ—Ç–µ–∏–Ω"]
        elif 60 <= weight <= 90:
            category = "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"
            fruits = ["–±–∞–Ω–∞–Ω", "–∫–ª—É–±–Ω–∏–∫–∞", "—à–ø–∏–Ω–∞—Ç"]
            additives = ["–ø—Ä–æ—Ç–µ–∏–Ω", "—Å–µ–º–µ–Ω–∞ —á–∏–∞"]
        else:
            category = "–ø–æ—Ö—É–¥–µ–Ω–∏–µ"
            fruits = ["spinach", "strawberry"]
            additives = ["—Å–µ–º–µ–Ω–∞ —á–∏–∞", "–∏–º–±–∏—Ä—å"]
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–º—É–∑–∏
        recommended = []
        for smoothie in smoothie_recipes.get("smoothies", []):
            if (smoothie["fruit"] in fruits and 
                any(additive in smoothie["additives"] for additive in additives)):
                recommended.append(smoothie)
        
        if recommended:
            smoothie = random.choice(recommended)
            response = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –≤–µ—Å–∞ {weight} –∫–≥ ({category}):\n"
            response += f"üçπ {smoothie['name']}\n–†–µ—Ü–µ–ø—Ç: {smoothie['recipe']}"
            bot.send_message(message.chat.id, response)
            if "image" in smoothie:
                bot.send_photo(message.chat.id, smoothie['image'])
        else:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–º—É–∑–∏.")
            
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70)")



print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
